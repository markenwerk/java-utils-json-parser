/*
 * Copyright (c) 2016 Torsten Krause, Markenwerk GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package net.markenwerk.utils.json.parser;

import java.io.IOException;

/**
 * A {@link JsonHandler} handles the events that are generated by a
 * {@link JsonPushParser}.
 * 
 * @author Torsten Krause (tk at markenwerk dot net)
 * @since 1.0.0
 */
public interface JsonHandler {

	/**
	 * Called when the parsing of a JSON document started.
	 */
	void onBeginDocument();

	/**
	 * Called when the parsing of a JSON document ended.
	 */
	void onEndDocument();

	/**
	 * Called when the parsing of a JSON array started. A corresponding call for
	 * the {@link JsonHandler#onEndArray() end} will eventually be called.
	 */
	void onBeginArray();

	/**
	 * Called when the parsing of a JSON array ended.
	 */
	void onEndArray();

	/**
	 * Called when the parsing of a JSON object started. A corresponding call
	 * for the {@link JsonHandler#onEndObject() end} will eventually be called.
	 */
	void onBeginObject();

	/**
	 * Called when the parsing of a JSON object encountered the name for the
	 * next JSON value.
	 * 
	 * @param name
	 *            The name for the next JSON value.
	 */
	void onName(String name);

	/**
	 * Called when the parsing of a JSON object ended.
	 */
	void onEndObject();

	/**
	 * Called when the parsing of a JSON object encountered a JSON null.
	 */
	void onNull();

	/**
	 * Called when the parsing of a JSON object encountered a JSON boolean.
	 * 
	 * @param value
	 *            The value of the JSON boolean.
	 */
	void onBoolean(boolean value);

	/**
	 * Called when the parsing of a JSON object encountered a JSON number, that
	 * represents an integer value.
	 * 
	 * @param value
	 *            The value of the JSON number.
	 */
	void onLong(long value);

	/**
	 * Called when the parsing of a JSON object encountered a JSON number, that
	 * represents a decimal value.
	 * 
	 * @param value
	 *            The value of the JSON number.
	 */
	void onDouble(double value);

	/**
	 * Called when the parsing of a JSON object encountered a JSON string.
	 * 
	 * @param value
	 *            The value of the JSON string.
	 */
	void onString(String value);

	/**
	 * Called, when an {@link JsonSyntaxException} occurred, during parsing. No
	 * further method will be called, after this method has been called.
	 * 
	 * @param exception
	 *            The {@link JsonSyntaxException}.
	 */
	void onException(JsonSyntaxException exception);

	/**
	 * Called, when an {@link IOException} occurred, during parsing. No further
	 * method will be called, after this method has been called.
	 * 
	 * @param exception
	 *            The {@link IOException}.
	 */
	void onException(IOException exception);

}
